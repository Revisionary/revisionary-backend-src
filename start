#!/bin/bash


ACTION=ask



# Create an .env file and start installation
if [[ ! -f .env ]]; then

	read -ep "Which environment are you installing on? (local | remote): " ENV
	if [[ $ENV == remote ]]; then

		cp .env.remote .env

	else

		cp .env.local .env

	fi

	ACTION=install

fi



# Get data from .env file
source .env



if [[ $ACTION == ask ]]; then

	read -ep "Which do you want to do? (install | rebuild | remove-files | remove-logs | prune-docker | reset-all  | reset-revisionary | update-server): " ACTION

fi



if [[ $ACTION == install ]]; then


	echo "Building the project..."
	sh helpers/docker-build.sh
	echo "Project built."


	echo "Checking MySQL to be ready..."
	while ! docker-compose exec db mysqladmin --user=${DB_USER} --password=${DB_ROOT_PASSWORD} --host "${LOCAL_IP}" ping --silent &> /dev/null ; do
		echo "Waiting for database connection..."
		sleep 3
	done
	echo "Site is ready!"


elif [[ $ACTION == rebuild ]]; then


	read -ep "Would you like to delete all the files and data as well? (yes | no): " DELETE


	echo "Closing the server..."
	docker-compose down
	echo "Server became down."


	if [[ $DELETE == yes ]]; then

		sh helpers/clean-files.sh

	fi


	echo "Rebuilding the project..."
	sh helpers/docker-build.sh
	echo "Project rebuilt."


	echo "Checking MySQL to be ready..."
	while ! docker-compose exec db mysqladmin --user=${DB_USER} --password=${DB_ROOT_PASSWORD} --host "${LOCAL_IP}" ping --silent &> /dev/null ; do
		echo "Waiting for database connection..."
		sleep 3
	done
	echo "Site is ready!"


elif [[ $ACTION == remove-files ]]; then


	echo "Closing the server..."
	docker-compose down
	echo "Server became down."


	echo "Removing the files..."
	sh helpers/clean-files.sh
	echo "Files are removed."


elif [[ $ACTION == remove-logs ]]; then


	echo "Closing the server..."
	docker-compose down
	echo "Server became down."


	echo "Removing the files..."
	sh helpers/clean-logs.sh
	echo "Files are removed."


	echo "Starting the server..."
	docker-compose up -d
	echo "Server has been started."


elif [[ $ACTION == prune-docker ]]; then


	echo "Closing the server..."
	docker-compose down
	echo "Server became down."


	echo "Pruning the docker..."
	sh helpers/clean-docker.sh
	echo "Docker reset."


elif [[ $ACTION == reset-all ]]; then


	echo "Closing the server..."
	docker-compose down
	echo "Server became down."


	echo "Resetting all..."
	sh helpers/clean-docker.sh
	sh helpers/clean-files.sh
	echo "All the project and Docker reset."


elif [[ $ACTION == reset-revisionary ]]; then


	echo "Closing the server..."
	docker-compose down
	echo "Server became down."


	echo "Cleaning files..."
	sh helpers/clean-files.sh
	echo "All the project reset."


elif [[ $ACTION == update-server ]]; then


	echo "Updating the server..."
	docker-compose stop
	docker-compose rm -f
	docker-compose pull
	docker-compose up -d --build
	echo "Server up-to-date."


fi
